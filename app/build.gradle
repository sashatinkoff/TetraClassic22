plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.firebase.crashlytics'
    id 'com.google.gms.google-services'
    id 'androidx.navigation.safeargs.kotlin'
}

apply from: '../tasks.gradle'
apply from: "$rootDir/versions.gradle"
def versionPropsFile = file('version.properties')

android {
    namespace = "com.isidroid.b21"
    compileSdk build_versions.compile_sdk

    defaultConfig {
        applicationId "com.isidroid.b21"
        minSdk build_versions.min_sdk
        targetSdk build_versions.target_sdk

        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = 0
        def versionBuild = 0

        if (versionPropsFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            versionBuild = versionProps['VERSION_BUILD'].toInteger()
        }

        versionCode versionMajor * 100000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        setProperty("archivesBaseName", applicationId + "." + versionName)

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":"$projectDir/schemas".toString()]
            }
        }

        testInstrumentationRunner "com.isidroid.b21.MockTestRunner"
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("ISIDROID_KEYSTORE"))
            storePassword System.getenv("ISIDROID_KEYSTORE_PASSWORD") ?: 'UNSET'
            keyAlias System.getenv("ISIDROID_KEY_ALIAS") ?: 'UNSET'
            keyPassword System.getenv("ISIDROID_KEY_PASSWORD") ?: 'UNSET'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
        compose false
    }

    flavorDimensions 'app_type'
    productFlavors {
        stage {
            dimension = 'app_type'
            applicationIdSuffix = ".stage"
        }

        prod {
            dimension = 'app_type'
        }
    }

    variantFilter { variant ->
        if (
        (name.contains("real") && name.contains("Mock"))
                || (name.contains("prod") && name.contains("Mock"))
                || (name.contains("stage") && name.contains("Mock") && name.contains("Release"))
        ) {
            setIgnore(true)
        }
    }
}

dependencies {
    api project(path: ':library:core')

    // google
    implementation "androidx.activity:activity-ktx:$google.activity_ktx"
    implementation "androidx.appcompat:appcompat:$google.app_compat"
    implementation "androidx.constraintlayout:constraintlayout:$google.constraint"
    implementation "androidx.core:core-ktx:$google.core_ktx"
    implementation "com.google.code.gson:gson:$google.gson"
    implementation "com.google.dagger:hilt-android:$google.hilt"

    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$google.lifecycle_runtime_ktx"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$google.lifecycle_viewmodel_ktx"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$google.lifecycler_viewmodel_savedstate"

    implementation "com.google.android.material:material:$google.material"
    implementation "androidx.navigation:navigation-fragment-ktx:$google.navigation_fragment"
    implementation "androidx.navigation:navigation-ui-ktx:$google.navigation_fragment"
    implementation "androidx.preference:preference-ktx:$google.prefs"
    implementation "androidx.room:room-runtime:$google.room"
    implementation "androidx.core:core-splashscreen:$google.splash"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$google.swipe_layout"
    implementation "androidx.work:work-runtime-ktx:$google.work"
    implementation "androidx.hilt:hilt-work:$google.hilt_work"

    kapt "com.google.dagger:hilt-compiler:$google.hilt_compiler"
    kapt "androidx.room:room-compiler:$google.room_compiler"

    // network
    implementation "com.squareup.retrofit2:converter-gson:$network.converter_gson"
    implementation "com.squareup.okhttp3:logging-interceptor:$network.logging"
    implementation "com.squareup.okhttp3:okhttp:$network.okhttp"
    implementation "com.squareup.okio:okio:$network.okio"
    implementation "com.squareup.retrofit2:retrofit:$network.retrofit"

    // firebase
    implementation firebase.analytics
    implementation firebase.crashlytics
    implementation firebase.messaging
    implementation platform("com.google.firebase:firebase-bom:$firebase.bom")
    implementation 'com.itextpdf:itextg:5.5.10'

    // tools
    implementation "com.github.bumptech.glide:glide:$tools.glide"

    // enable it for using scalable images
    implementation "com.github.chrisbanes:PhotoView:$tools.photoview"
    implementation "com.jakewharton.timber:timber:$tools.timber"
    kapt "com.github.bumptech.glide:compiler:$tools.glide"

    // test
    androidTestImplementation "androidx.test.espresso:espresso-core:$test.espresso_core"
    androidTestImplementation "junit:junit:$test.junit"
    testImplementation "androidx.test.ext:junit:$test.junit_ext"
}